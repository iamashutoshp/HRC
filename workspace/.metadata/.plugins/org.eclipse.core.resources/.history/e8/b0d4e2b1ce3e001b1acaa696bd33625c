package com.highradius.internship.SearchNpage;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;
import com.highradius.internship.DataClass;

import com.highradius.internship.data.*;


@WebServlet("/paging")



// implementing server side paging
public class Pagination extends HttpServlet{
	private static final long serialVersionUID = 1L;
    
    public Pagination() throws ClassNotFoundException {
    	super();
    }

	
    
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		int pageNo = Integer.parseInt(request.getParameter("pNo"))-1;
		String level = request.getParameter("LvL");
		 

		ArrayList<OrderDetails> data = null;
		Connection connection = null;
		String query="";
		try {
			connection = DataClass.initializeDatabase();
			
//			getting data for pages based on the level of user
			switch (level) {
			case "Level 2":
				query = "SELECT * FROM `order_details` WHERE `Order_Amount` <= '50000' AND `Order_Amount` > '10000' ;"  ;
				data=levelBasedData.Level2Page(connection, level, pageNo,query);
			break;	
			case "Level 3":
				query = "SELECT * FROM `order_details` WHERE `Order_Amount` > '50000' ;"  ;
				data=levelBasedData.Level3Page(connection, level, pageNo,query);
			break;
			default:
				query = "SELECT * FROM order_details ;"  ;
				data=levelBasedData.Level1Page(connection, level, pageNo,query);
				break;
			}
			
			DataClass.closeDBConnection(connection);
			System.out.println(query);
			
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
//		getting total pages available for the user in sz 
		int sz=0;
		if(data.size()%10 == 0)
			sz=data.size()/10;
		else
			sz=data.size()/10 + 1;		
		
		
// getting required page no.'s data in rowData List
		
		ArrayList<OrderDetails> rowData = new ArrayList<>();
		for(int k=0;k<10 && (k+10*pageNo)<data.size();k++)
			rowData.add(data.get(k+10*pageNo));
		
// storing requested pageNo's data and current page no. and total pages available for the user in Data res 
		Data res = new Data(rowData, pageNo+1, sz);
		
		
//		sending the Data res to front-end
		Gson gson = new Gson();
		String send = gson.toJson(res);
		PrintWriter out = response.getWriter();
		 
		 response.setContentType("application/json");
		 response.setCharacterEncoding("UTF-8");
		 
		 out.print(send);
		 out.flush();
	}

		
		


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	doGet(request, response);
		
	}
	
	

}

// Data class to store the data to be sent 
class Data{
	ArrayList<OrderDetails> data;
	int pageNo, totalSize;
	Data(ArrayList<OrderDetails> d, int pno, int size){
		data=d;
		pageNo = pno;
		totalSize =size;
	}
}
